{
  "metadata": {
    "kernelspec": {
      "name": "ir",
      "display_name": "R",
      "language": "R"
    },
    "language_info": {
      "name": "R",
      "codemirror_mode": "r",
      "pygments_lexer": "r",
      "mimetype": "text/x-r-source",
      "file_extension": ".r",
      "version": "4.0.5"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [
        {
          "sourceId": 482,
          "sourceType": "datasetVersion",
          "datasetId": 228
        }
      ],
      "dockerImageVersionId": 30139,
      "isInternetEnabled": false,
      "language": "r",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "name": "Pima Diabetes Dataset(Logistic Regression)",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AbyssWatcher07/DIFGRI30_A_25_2311532021_Stanley-Leonard-Darmali-/blob/main/Datasets/Pima_Diabetes_Dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "\n",
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n",
        "# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S R\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "\n",
        "DATA_SOURCE_MAPPING = 'pima-indians-diabetes-database:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F228%2F482%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20250306%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20250306T071806Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D0a361dc9cb75e0ed2f8b76d1aa42d88802cab28793c09a411eed9e5bf7c73930be9c71dd827e90e8c9f7a7f3cab95a57bef6ece196e0cbc09f5df4ecb3efc18bfed470393b77e9fc4cd8e14fba18e741142d623eabc5e2b37e199fccffcf44b29c052c830a13d4183897e6574699aac634a48b05ba7599de35fec3e5934d80e22e82ae57153be191cc91beabfa2e5814883b94324da41a75451020412750bfd8fcbdf931118e7ab07d88f372e6263681f61516560518229da682c45d6c050698f6de27b50d999e092f4c4b27ac4a8889e181e2b6648d944ebdbd02a1fc7215a1ce8f0fa363f92fb4e8c006144cbfbb8d81ac131114c30121234d07e14e7f1556'\n",
        "\n",
        "KAGGLE_INPUT_PATH = '/kaggle/input'\n",
        "KAGGLE_WORKING_PATH = '/kaggle/working'\n",
        "\n",
        "system(paste0('sudo umount ', '/kaggle/input'))\n",
        "system(paste0('sudo rmdir ', '/kaggle/input'))\n",
        "system(paste0('sudo mkdir -p -- ', KAGGLE_INPUT_PATH), intern=TRUE)\n",
        "system(paste0('sudo chmod 777 ', KAGGLE_INPUT_PATH), intern=TRUE)\n",
        "system(\n",
        "  paste0('sudo ln -sfn ', KAGGLE_INPUT_PATH,' ',file.path('..', 'input')),\n",
        "  intern=TRUE)\n",
        "\n",
        "system(paste0('sudo mkdir -p -- ', KAGGLE_WORKING_PATH), intern=TRUE)\n",
        "system(paste0('sudo chmod 777 ', KAGGLE_WORKING_PATH), intern=TRUE)\n",
        "system(\n",
        "  paste0('sudo ln -sfn ', KAGGLE_WORKING_PATH, ' ', file.path('..', 'working')),\n",
        "  intern=TRUE)\n",
        "\n",
        "data_source_mappings = strsplit(DATA_SOURCE_MAPPING, ',')[[1]]\n",
        "for (data_source_mapping in data_source_mappings) {\n",
        "    path_and_url = strsplit(data_source_mapping, ':')\n",
        "    directory = path_and_url[[1]][1]\n",
        "    download_url = URLdecode(path_and_url[[1]][2])\n",
        "    filename = sub(\"\\\\?.+\", \"\", download_url)\n",
        "    destination_path = file.path(KAGGLE_INPUT_PATH, directory)\n",
        "    print(paste0('Downloading and uncompressing: ', directory))\n",
        "    if (endsWith(filename, '.zip')){\n",
        "      temp = tempfile(fileext = '.zip')\n",
        "      download.file(download_url, temp)\n",
        "      unzip(temp, overwrite = TRUE, exdir = destination_path)\n",
        "      unlink(temp)\n",
        "    }\n",
        "    else{\n",
        "      temp = tempfile(fileext = '.tar')\n",
        "      download.file(download_url, temp)\n",
        "      untar(temp, exdir = destination_path)\n",
        "      unlink(temp)\n",
        "    }\n",
        "    print(paste0('Downloaded and uncompressed: ', directory))\n",
        "}\n",
        "\n",
        "print(paste0('Data source import complete'))\n"
      ],
      "metadata": {
        "id": "L7wUA_rSUYDS"
      },
      "cell_type": "code",
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Logistic Regression\n",
        "Logistic regression is a supervised learning classification algorithm used to predict the probability of a target variable. The nature of target or dependent variable is dichotomous, which means there would be only two possible classes.\n",
        "\n",
        "**I will be applying Logistic Regression classification algorithm to predict whether or not the patients in the dataset have diabetes or not.**"
      ],
      "metadata": {
        "id": "p-yRSn8lUYDU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Importing Libraries\n",
        "library(dplyr)\n",
        "library(ggplot2)\n",
        "library(ggcorrplot)\n",
        "library(caTools)\n",
        "library(ggcorrplot)\n",
        "library(Metrics)\n",
        "library(InformationValue)\n",
        "library(ROCR)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:47:23.524768Z",
          "iopub.execute_input": "2021-10-31T11:47:23.526425Z",
          "iopub.status.idle": "2021-10-31T11:47:23.548637Z"
        },
        "trusted": true,
        "id": "DziyrMSFUYDV"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "#Importing the data set\n",
        "df1<-read.csv('../input/pima-indians-diabetes-database/diabetes.csv')\n",
        "head(df1)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:47:23.550724Z",
          "iopub.execute_input": "2021-10-31T11:47:23.551953Z",
          "iopub.status.idle": "2021-10-31T11:47:23.583987Z"
        },
        "trusted": true,
        "id": "OD9pp4UdUYDV"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "# About the data\n",
        "This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases and has about 768 rows.The datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on."
      ],
      "metadata": {
        "id": "Zg-00IgpUYDW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preperation"
      ],
      "metadata": {
        "id": "g1V3kKjvUYDW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str(df1)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:47:23.586161Z",
          "iopub.execute_input": "2021-10-31T11:47:23.587451Z",
          "iopub.status.idle": "2021-10-31T11:47:23.605498Z"
        },
        "trusted": true,
        "id": "yUqhrEz2UYDW"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Checking for NA values**"
      ],
      "metadata": {
        "id": "yX0N-cT6UYDX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "colSums(is.na(df1))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:47:23.607545Z",
          "iopub.execute_input": "2021-10-31T11:47:23.608765Z",
          "iopub.status.idle": "2021-10-31T11:47:23.622251Z"
        },
        "trusted": true,
        "id": "2-G3YmclUYDX"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are no NA values in our dataset."
      ],
      "metadata": {
        "id": "knju4GopUYDX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Checking for outliers**"
      ],
      "metadata": {
        "id": "eYZA19mAUYDY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "par(mfrow=c(2, 3))\n",
        "boxplot(df1$Pregnancies~df1$Outcome, main=\"No. of Pregnancies vs. Diabetes\", xlab=\"Outcome\", ylab=\"Pregnancies\")\n",
        "boxplot(df1$Glucose~df1$Outcome, main=\"Glucose vs. Diabetes\", xlab=\"Outcome\", ylab=\"Glucose\")\n",
        "boxplot(df1$SkinThickness~df1$Outcome, main=\"Skin Thickness vs. Diabetes\", xlab=\"Outcome\", ylab=\"Skin Thickness\")\n",
        "boxplot(df1$BMI~df1$Outcome, main=\"BMI vs. Diabetes\", xlab=\"Outcome\", ylab=\"BMI\")\n",
        "boxplot(df1$DiabetesPedigreeFunction~df1$Outcome, main=\"Diabetes Pedigree Function vs. Diabetes\", xlab=\"Outcome\", ylab=\"DiabetesPedigreeFunction\")\n",
        "boxplot(df1$Age~df1$Outcome, main=\"Age vs. Diabetes\", xlab=\"Outcome\", ylab=\"Age\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:47:23.624366Z",
          "iopub.execute_input": "2021-10-31T11:47:23.625596Z",
          "iopub.status.idle": "2021-10-31T11:47:23.729211Z"
        },
        "trusted": true,
        "id": "ZyTIGGebUYDY"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can clearly see there are quite a few outliers in our data and we need to remove them.\n",
        "Also we can observe that the probability of getting diabetes is directly proportial to various medical paramters such as No.of pregnancies, Glucose, Skin Thickness, BMI, Age etc."
      ],
      "metadata": {
        "id": "nGXqMVnZUYDY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Applying Outlier Treatment\n",
        "outlier_treat <- function(x){\n",
        "        UC = quantile(x, p=0.99,na.rm=T)\n",
        "        LC = quantile(x, p=0.01,na.rm=T)\n",
        "        x=ifelse(x>UC,UC, x)\n",
        "        x=ifelse(x<LC,LC, x)\n",
        "        return(x)\n",
        "}\n",
        "df1 = data.frame(apply(df1, 2, FUN=outlier_treat))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:48:23.394083Z",
          "iopub.execute_input": "2021-10-31T11:48:23.39555Z",
          "iopub.status.idle": "2021-10-31T11:48:23.420038Z"
        },
        "trusted": true,
        "id": "ry1hwN-QUYDY"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "#Plotting boxplot to check if the outliers have been removed or not\n",
        "par(mfrow=c(2, 3))\n",
        "boxplot(df1$Pregnancies~df1$Outcome, main=\"No. of Pregnancies vs. Diabetes\", xlab=\"Outcome\", ylab=\"Pregnancies\")\n",
        "boxplot(df1$Glucose~df1$Outcome, main=\"Glucose vs. Diabetes\", xlab=\"Outcome\", ylab=\"Glucose\")\n",
        "boxplot(df1$SkinThickness~df1$Outcome, main=\"Skin Thickness vs. Diabetes\", xlab=\"Outcome\", ylab=\"Skin Thickness\")\n",
        "boxplot(df1$BMI~df1$Outcome, main=\"BMI vs. Diabetes\", xlab=\"Outcome\", ylab=\"BMI\")\n",
        "boxplot(df1$DiabetesPedigreeFunction~df1$Outcome, main=\"Diabetes Pedigree Function vs. Diabetes\", xlab=\"Outcome\", ylab=\"DiabetesPedigreeFunction\")\n",
        "boxplot(df1$Age~df1$Outcome, main=\"Age vs. Diabetes\", xlab=\"Outcome\", ylab=\"Age\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:49:21.848738Z",
          "iopub.execute_input": "2021-10-31T11:49:21.850419Z",
          "iopub.status.idle": "2021-10-31T11:49:21.963547Z"
        },
        "trusted": true,
        "id": "BsXsvQ5_UYDY"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Now that we have prepared our data, Let's create some simple plots to check out the data!**"
      ],
      "metadata": {
        "id": "HK9GB_11UYDY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Plotting Correlation Matrix\n",
        "cor(df1)\n",
        "\n",
        "require(ggcorrplot)\n",
        "corr <- round(cor(df1), 1)\n",
        "ggcorrplot(corr,\n",
        "           type = \"lower\",\n",
        "           lab = TRUE,\n",
        "           lab_size = 5,\n",
        "           colors = c(\"red\", \"white\", \"cyan4\"),\n",
        "           title=\"Correlogram of Diabtes Dataset\",\n",
        "           ggtheme=theme_bw)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:53:45.45288Z",
          "iopub.execute_input": "2021-10-31T11:53:45.454597Z",
          "iopub.status.idle": "2021-10-31T11:53:45.902106Z"
        },
        "trusted": true,
        "id": "Zl-dYIPQUYDY"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "#Histogram to see whether the BloodPressure, BMI, Glucose and SkinThickness are normally distributed or not\n",
        "#Plotting Histogram\n",
        "par(mfrow=c(2, 3))\n",
        "hist(df1$Pregnancies, breaks = 10, col = \"coral2\", main = \"No. of Pregnancies\", xlab = \"Pregnancies\")\n",
        "hist(df1$Glucose, breaks = 5, col = \"gold1\", main = \"Glucose\", xlab = \"Glucose\")\n",
        "hist(df1$BloodPressure, breaks = 5, col = \"light green\", main = \"Blood Pressure\", xlab = \"Blood Pressure\")\n",
        "hist(df1$SkinThickness, breaks = 10, col = \"sky blue\", main = \"Skin Thickness\", xlab = \"Skin Thickness\")\n",
        "hist(df1$Insulin, breaks = 10, col = \"orange\", main = \"Insulin\", xlab = \"Insulin\")\n",
        "hist(df1$Age, breaks = 10, col = \"pink\", main = \"Age\", xlab = \"Age\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T11:55:29.18498Z",
          "iopub.execute_input": "2021-10-31T11:55:29.187496Z",
          "iopub.status.idle": "2021-10-31T11:55:29.303395Z"
        },
        "trusted": true,
        "id": "VA20VptqUYDZ"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "#Converting outcome to factor variable\n",
        "df1$Outcome<-as.factor(df1$Outcome)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:14:55.181017Z",
          "iopub.execute_input": "2021-10-31T12:14:55.183866Z",
          "iopub.status.idle": "2021-10-31T12:14:55.209781Z"
        },
        "trusted": true,
        "id": "ivIlKHiRUYDZ"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Building the model\n",
        "\n",
        "I will now be spliting data into training and testing set. I have taken 75% of the data for training and 35% of data for testing."
      ],
      "metadata": {
        "id": "QDW9nMc8UYDZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Splitting the dataset into the Training set and Test set\n",
        "require(caTools)\n",
        "sample.split(df1$Outcome, SplitRatio = 0.75)->split_index\n",
        "training_set <- subset(df1,split_index == TRUE)\n",
        "test_set <- subset(df1, split_index == FALSE)\n",
        "nrow(test_set)\n",
        "nrow(training_set)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:15:02.41887Z",
          "iopub.execute_input": "2021-10-31T12:15:02.421102Z",
          "iopub.status.idle": "2021-10-31T12:15:02.467116Z"
        },
        "trusted": true,
        "id": "AS8kPjfFUYDZ"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "#using the glm function to build logistic regression model\n",
        "model <- glm(Outcome~.-SkinThickness-Insulin-Age, data = training_set,family = \"binomial\")\n",
        "summary(model)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:15:22.754976Z",
          "iopub.execute_input": "2021-10-31T12:15:22.756976Z",
          "iopub.status.idle": "2021-10-31T12:15:22.79206Z"
        },
        "trusted": true,
        "id": "myARXTaAUYDZ"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Coming Up with the Predicted Probabilities\n",
        "train<- cbind(training_set, Prob=predict(model, type=\"response\"))\n",
        "head(train)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:13:01.318038Z",
          "iopub.execute_input": "2021-10-31T12:13:01.3205Z",
          "iopub.status.idle": "2021-10-31T12:13:01.358195Z"
        },
        "trusted": true,
        "id": "ev_8bCfWUYDZ"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Evaluation and Validation"
      ],
      "metadata": {
        "id": "Oem-7mgQUYDZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**For Train Dataset**"
      ],
      "metadata": {
        "id": "pPGzPpl7UYDZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Classification table\n",
        "train_table <- table(Predicted = train$Prob>0.5, Actual = train$Outcome)\n",
        "train_table\n",
        "\n",
        "# Accuracy of the dataset\n",
        "accuracy.train <- round(sum(diag(train_table))/sum(train_table),2)\n",
        "sprintf(\"Accuracy-%s\",accuracy.train)\n",
        "\n",
        "# Precision and Recall of the dataset\n",
        "precision.train <- traintable [2,2]/sum(train_table [2,])\n",
        "recall.train <- traintable [2,2]/sum(train_table [,2])\n",
        "sprintf(\"Precision-%s\",accuracy.train)\n",
        "sprintf(\"Recall-%s\",accuracy.train)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:39:47.068573Z",
          "iopub.execute_input": "2021-10-31T12:39:47.070281Z",
          "iopub.status.idle": "2021-10-31T12:39:47.109239Z"
        },
        "trusted": true,
        "id": "CfYERJxwUYDa"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Coming up with an optimum cut-off threshold value for higher precision**"
      ],
      "metadata": {
        "id": "TDegS367UYDa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#finding optimal cutoff probability to use to maximize accuracy\n",
        "optimal <- optimalCutoff(train$Outcome, train$Prob)\n",
        "optimal"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:42:53.502529Z",
          "iopub.execute_input": "2021-10-31T12:42:53.504127Z",
          "iopub.status.idle": "2021-10-31T12:42:53.553213Z"
        },
        "trusted": true,
        "id": "u9U6CMGNUYDa"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "The optimum cut-off threshold was found out to be 0.55212861038783"
      ],
      "metadata": {
        "id": "wleM-w3GUYDa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Using 0.55212 as a threshold value\n",
        "# Classification table\n",
        "train_table <- table(Predicted = train$Prob>0.55212, Actual = train$Outcome)\n",
        "train_table\n",
        "\n",
        "# Accuracy of the dataset\n",
        "accuracy.train <- round(sum(diag(train_table))/sum(train_table),2)\n",
        "sprintf(\"Accuracy-%s\",accuracy.train)\n",
        "\n",
        "# Precision and Recall of the dataset\n",
        "precision.train <- traintable [2,2]/sum(train_table [2,])\n",
        "recall.train <- traintable [2,2]/sum(train_table [,2])\n",
        "sprintf(\"Precision-%s\",accuracy.train)\n",
        "sprintf(\"Recall-%s\",accuracy.train)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:47:04.744448Z",
          "iopub.execute_input": "2021-10-31T12:47:04.745984Z",
          "iopub.status.idle": "2021-10-31T12:47:04.78694Z"
        },
        "trusted": true,
        "id": "qz6zNsW2UYDa"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "**RoCR Curve**"
      ],
      "metadata": {
        "id": "cBgW96hoUYDa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "library(ROCR)\n",
        "\n",
        "ROCRPred=prediction(train$Prob,train$Outcome)\n",
        "\n",
        "ROCRPerf<-performance(ROCRPred,\"tpr\",\"fpr\")\n",
        "\n",
        "plot(ROCRPerf,colorize=TRUE,print.cutoffs.at=seq(0.1,by=0.1))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:48:58.68396Z",
          "iopub.execute_input": "2021-10-31T12:48:58.68616Z",
          "iopub.status.idle": "2021-10-31T12:48:58.971632Z"
        },
        "trusted": true,
        "id": "__6PQMJZUYDa"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "**For Test dataset**"
      ],
      "metadata": {
        "id": "456Esks-UYDb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test <- cbind(test_set, Prob=predict(model, test_set, type = \"response\"))\n",
        "\n",
        "# Classification table\n",
        "test_table <- table(Predicted = test$Prob>0.55212, Actual = test$Outcome)\n",
        "test_table\n",
        "\n",
        "# Accuracy of the dataset\n",
        "accuracy.test <- round(sum(diag(test_table))/sum(test_table),2)\n",
        "sprintf(\"Accuracy-%s\",accuracy.test)\n",
        "\n",
        "# Precision and Recall of the dataset\n",
        "precision.test <- test_table [2,2]/sum(test_table [2,])\n",
        "recall.test <- test_table [2,2]/sum(test_table [,2])\n",
        "sprintf(\"Precision-%s\",accuracy.test)\n",
        "sprintf(\"Recall-%s\",accuracy.test)\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-10-31T12:55:41.710608Z",
          "iopub.execute_input": "2021-10-31T12:55:41.713193Z",
          "iopub.status.idle": "2021-10-31T12:55:41.787588Z"
        },
        "trusted": true,
        "id": "jibpjfgXUYDb"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "We get a 76% precise classifier using Logistic Regression."
      ],
      "metadata": {
        "id": "pvJjGkKPUYDb"
      }
    }
  ]
}